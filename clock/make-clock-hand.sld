(define-library (make-clock-hand)
  (export main-program)
  (import (scheme base)
          (scheme read)
          (scheme file)
          (scheme inexact)
          (scheme process-context)
          (srfi 27)
          (foldling command-line)
          (seth cout)
          (seth model-3d)
          (seth math-3d)
          (seth scad-model)
          (seth obj-model))
  (begin
    (define (make-clock-hand model mesh hand-base-width hand-length hand-depth)
      (let* ((clock-hand-material (model-get-material-by-name model "clock_hand_mtl"))
             (p0 (vector (/ hand-base-width -2.0) 0 0))
             (p1 (vector (/ hand-base-width 2.0) 0 0))
             (p2 (vector 0 hand-depth 0))
             (p3 (vector 0 0 hand-length)))
        (mesh-append-triangle! model mesh clock-hand-material (list p0 p1 p2))
        (mesh-append-triangle! model mesh clock-hand-material (list p1 p2 p2))
        (mesh-append-triangle! model mesh clock-hand-material (list p0 p2 p3))
        (mesh-append-triangle! model mesh clock-hand-material (list p0 p3 p1))))

    (define (main-program)
      (define (usage why)
        (cerr why "\n")
        (cerr "make-clock-hand [arguments] obj-output-file\n")
        (cerr "  --base-width <size>     fatness of thickest part\n")
        (cerr "  --length                how long\n")
        (cerr "  --depth                 how tall is the hand\n")
        (exit 1))

      (let* ((args (parse-command-line `((-?) (-h)
                                         (--base-width hand-base-width)
                                         (--length hand-length)
                                         (--depth hand-depth))))
             (output-filename #f)
             (point-count #f)
             (hand-base-width #f)
             (hand-length #f)
             (hand-depth #f)
             (extra-arguments '()))
        (for-each
         (lambda (arg)
           (case (car arg)
             ((-? -h) (usage ""))
             ((--size)
              (set! size (string->number (cadr arg))))
             ((--base-width)
              (set! hand-base-width (string->number (cadr arg))))
             ((--length)
              (set! hand-length (string->number (cadr arg))))
             ((--depth)
              (set! hand-depth (string->number (cadr arg))))
             ((--)
              (set! extra-arguments (cdr arg)))))
         args)

        (if (not hand-base-width) (set! hand-base-width 0.02))
        (if (not hand-length) (set! hand-length 0.08))
        (if (not hand-depth) (set! hand-depth 0.02))

        (cond ((= (length extra-arguments) 0)
               (set! output-filename "-"))
              ((= (length extra-arguments) 1)
               (set! output-filename (car extra-arguments)))
              (else
               (usage "give obj output-filename")))

        (let* ((model (make-empty-model))
               (mesh (make-mesh #f '()))
               (output-handle
                (if (equal? output-filename "-")
                    (current-output-port)
                    (open-output-file output-filename))))
          (model-prepend-mesh! model mesh)
          (add-material-libraries model '("clock.mtl"))

          (make-clock-hand model mesh hand-base-width hand-length hand-depth)

          (write-obj-model model output-handle)

          (if (not (equal? output-filename "-"))
              (close-output-port output-handle)))))
    ))
