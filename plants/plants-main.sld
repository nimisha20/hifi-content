(define-library (plants-main)
  (export main-program)
  (import (scheme base)
          (scheme file)
          (scheme inexact)
          (scheme process-context)
          (srfi 27)
          (foldling command-line)
          (seth cout)
          (seth model-3d)
          (seth math-3d)
          (seth scad-model)
          (seth obj-model))
  (begin


    (define (main-program)
      (define (usage why)
        (cerr why "\n")
        (cerr "plants [arguments] obj-output-file\n")
        (cerr "  --random-i              pseudo-random number generator seed\n")
        (cerr "  --random-j              pseudo-random number generator seed\n")
        (cerr "  --size                  maximum dimension of output\n")
        (cerr "  --scad                  output scad rather than obj\n")
        (exit 1))

      (let* ((args (parse-command-line `((-?) (-h)
                                         (--type type)
                                         (--scad)
                                         (--random-i random-i)
                                         (--random-j random-j)
                                         (--size size))))
             (output-filename #f)
             (point-count #f)
             (random-i #f)
             (random-j #f)
             (size #f)
             (type #f)
             (output-scad #f)
             (extra-arguments '()))
        (for-each
         (lambda (arg)
           (case (car arg)
             ((-? -h) (usage ""))
             ((--random-i)
              (set! random-i (string->number (cadr arg))))
             ((--random-j)
              (set! random-j (string->number (cadr arg))))
             ((--size)
              (set! size (string->number (cadr arg))))
             ((--type)
              (set! type (string->number (cadr arg))))
             ((--scad)
              (if output-scad (usage "give --output-scad only once"))
              (set! output-scad #t))
             ((--)
              (set! extra-arguments (cdr arg)))))
         args)

        (if (not random-i) (set! random-i 0))
        (if (not random-j) (set! random-j 0))
        (if (not size) (set! size 10))
        (if (not type)
            (set! type 0))

        (if (not (= (length extra-arguments) 1))
            (usage "give obj output-filename"))
        (set! output-filename (car extra-arguments))

        (let* ((model (make-empty-model))
               (mesh (make-mesh #f '()))
               (random-source (make-random-source))
               (random-integer (random-source-make-integers random-source))
               (output-handle
                (if (equal? output-filename "-")
                    (current-output-port)
                    (open-output-file output-filename))))
          (random-source-pseudo-randomize! random-source random-i random-j)
          (model-prepend-mesh! model mesh)
          (add-material-libraries model '("plants.mtl"))

          (let* ((leaf-material (model-get-material-by-name model "leaf_mtl"))
                 (leaf-half-width 0.3)
                 (leaf-low-point 0.8)
                 (leaf-high-point 1.0)
                 (p0 (vector 0 0 0))
                 (p1 (vector leaf-half-width leaf-low-point 0.5))
                 (p2 (vector (- leaf-half-width) leaf-low-point 0.5))
                 (p3 (vector 0 leaf-high-point 0.5))
                 (leaf-tip (vector 0 0.7 1.0)))
            (define (leaf q)
              (define (q*p v) (vector3-rotate v q))
              (mesh-append-triangle! model mesh leaf-material (map q*p (list p0 p1 p2)))
              (mesh-append-triangle! model mesh leaf-material (map q*p (list p0 p3 p1)))
              (mesh-append-triangle! model mesh leaf-material (map q*p (list p0 p2 p3)))
              (mesh-append-triangle! model mesh leaf-material (map q*p (list p1 p3 leaf-tip)))
              (mesh-append-triangle! model mesh leaf-material (map q*p (list p3 p2 leaf-tip)))
              (mesh-append-triangle! model mesh leaf-material (map q*p (list p2 p1 leaf-tip)))
              )

            (leaf (euler->quaternion (vector 0 (degrees->radians 0) 0)))
            (leaf (euler->quaternion (vector 0 (degrees->radians 120) 0)))
            (leaf (euler->quaternion (vector 0 (degrees->radians 240) 0))))

          ;; (write-scad-file
          ;;  (list (model->scad-polyhedron hull-model))
          ;;  output-handle)

          (write-obj-model model output-handle)

          (if (not (equal? output-filename "-"))
              (close-output-port output-handle)))))))
