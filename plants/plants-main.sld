(define-library (plants-main)
  (export main-program)
  (import (scheme base)
          (scheme read)
          (scheme file)
          (scheme inexact)
          (scheme process-context)
          (srfi 27)
          (foldling command-line)
          (seth cout)
          (seth model-3d)
          (seth math-3d)
          (seth scad-model)
          (seth obj-model))
  (begin


    (define (make-plant model mesh plant-specification)

      (let* ((leaf-material (model-get-material-by-name model "leaf_mtl"))
             (leaf-half-width 0.3)
             (leaf-low-point 0.8)
             (leaf-high-point 1.0)
             (p0 (vector 0 0 0))
             (p1 (vector leaf-half-width leaf-low-point 0.5))
             (p2 (vector (- leaf-half-width) leaf-low-point 0.5))
             (p3 (vector 0 leaf-high-point 0.5))
             (leaf-tip (vector 0 0.7 1.0))
             (plant-position (list->vector (list-ref plant-specification 0)))
             (plant-rotation (list->vector (list-ref plant-specification 1)))
             (plant-scale (list-ref plant-specification 2))
             (plant-transform
              (matrix-* (matrix-translation plant-position)
                        (matrix-rotation-quaternion plant-rotation)
                        (matrix-scaling plant-scale))))

        (define (leaf q)
          (define (transform-point v)
            (let* ((model-frame-point-3 (vector3-rotate v q))
                   (model-frame-point-4 (vector3->4 model-frame-point-3)))
              (vector4->3 (matrix-* plant-transform model-frame-point-4))))
          (mesh-append-triangle! model mesh leaf-material (map transform-point (list p0 p1 p2)))
          (mesh-append-triangle! model mesh leaf-material (map transform-point (list p0 p3 p1)))
          (mesh-append-triangle! model mesh leaf-material (map transform-point (list p0 p2 p3)))
          (mesh-append-triangle! model mesh leaf-material (map transform-point (list p1 p3 leaf-tip)))
          (mesh-append-triangle! model mesh leaf-material (map transform-point (list p3 p2 leaf-tip)))
          (mesh-append-triangle! model mesh leaf-material (map transform-point (list p2 p1 leaf-tip))))

        (leaf (euler->quaternion (vector 0 (degrees->radians 0) 0)))
        (leaf (euler->quaternion (vector 0 (degrees->radians 120) 0)))
        (leaf (euler->quaternion (vector 0 (degrees->radians 240) 0)))))


    (define (make-plants model mesh plant-specifications)
      (let loop ((plant-specifications plant-specifications))
        (cond ((null? plant-specifications) #t)
              (else
               (make-plant model mesh (car plant-specifications))
               (loop (cdr plant-specifications))))))


    (define (main-program)
      (define (usage why)
        (cerr why "\n")
        (cerr "plants [arguments] obj-output-file\n")
        (cerr "  --size <size>           maximum dimension of output\n")
        (cerr "  --scad                  output scad rather than obj\n")
        (cerr "  --group <input-file>    combine plants into one obj file\n")
        (exit 1))

      (let* ((args (parse-command-line `((-?) (-h)
                                         (--type type)
                                         (--scad)
                                         (--size size)
                                         (--group group-input-file)
                                         )))
             (output-filename #f)
             (point-count #f)
             (size #f)
             (group-input-file-names '())
             (type #f)
             (output-scad #f)
             (extra-arguments '()))
        (for-each
         (lambda (arg)
           (case (car arg)
             ((-? -h) (usage ""))
             ((--size)
              (set! size (string->number (cadr arg))))
             ((--type)
              (set! type (string->number (cadr arg))))
             ((--scad)
              (if output-scad (usage "give --output-scad only once"))
              (set! output-scad #t))
             ((--group)
              (set! group-input-file-names (cons (cadr arg) group-input-file-names)))
             ((--)
              (set! extra-arguments (cdr arg)))))
         args)

        (if (not size) (set! size 10))
        (if (not type)
            (set! type 0))

        (if (not (= (length extra-arguments) 1))
            (usage "give obj output-filename"))
        (set! output-filename (car extra-arguments))

        (let* ((model (make-empty-model))
               (mesh (make-mesh #f '()))
               (output-handle
                (if (equal? output-filename "-")
                    (current-output-port)
                    (open-output-file output-filename))))
          (model-prepend-mesh! model mesh)
          (add-material-libraries model '("plants.mtl"))

          (cond ((not (null? group-input-file-names))
                 (let loop ((group-input-file-names group-input-file-names))
                   (if (null? group-input-file-names)
                       (let* ((bounds (model-aa-box model))
                              (center (aa-box-center bounds)))
                         (cout center "\n"))
                       (let* ((input-handle (open-input-file (car group-input-file-names)))
                              (plant-specifications (read input-handle)))
                         (close-input-port input-handle)
                         (make-plants model mesh plant-specifications)
                         (loop (cdr group-input-file-names))))))
                (else
                 (make-plant model mesh '((0 0 0) (1 0 0 0) 1))))

          ;; (write-scad-file
          ;;  (list (model->scad-polyhedron hull-model))
          ;;  output-handle)

          (write-obj-model model output-handle)

          (if (not (equal? output-filename "-"))
              (close-output-port output-handle)))))
    ))
